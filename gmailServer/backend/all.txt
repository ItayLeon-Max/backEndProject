# routers/draft/draft.ts
import { getDrafts } from "../../controllers/draft/controller";
import { Router } from "express";

const draftRouter = Router();

draftRouter.get("/:userId", getDrafts); // get all drafts for a user

export default draftRouter;
# routers/auth/auth.ts
import { Router } from 'express';
import { deleteUser, getAllUsers, login, logout, register, updateUser } from '../../controllers/auth/controller';
import validation from '../../middlewares/validation';
import { deleteUserValidator, loginValidator, registerValidator, updateUserValidator } from '../../controllers/auth/validator';

const authRouter = Router();

// auth routes
authRouter.get('/', getAllUsers)
authRouter.post('/login', validation(loginValidator), login);
authRouter.post('/register', validation(registerValidator), register);
authRouter.delete('/:id', validation(deleteUserValidator) ,deleteUser);
authRouter.put('/:id', validation(updateUserValidator) ,updateUser);
authRouter.post('/logout/:id', logout);

export default authRouter;
# routers/label/label.ts
import { createLabel, getLabels } from "../../controllers/label/controller";
import { Router } from "express";

const labelRouter = Router();

labelRouter.get("/", getLabels);
labelRouter.post("/", createLabel);

export default labelRouter; 
# routers/email-label/email-labels.ts
import { addLabelToEmail } from "../../controllers/email-labels/controller";
import { Router } from "express";

const emailLabelRouter = Router();

emailLabelRouter.post("/:emailId", addLabelToEmail);

export default emailLabelRouter;
# routers/email/email.ts
import { deleteEmail, getEmailInbox, getEmails, getEmailSent, getEmailThread, readEmailAt, replyToEmail, sendEmail } from "../../controllers/email/controller";
import { Router } from "express";


const emailRouter = Router();

emailRouter.get("/", getEmails); // get all emails
emailRouter.get("/inbox/:userId", getEmailInbox); // get inbox emails
emailRouter.get("/sent/:userId", getEmailSent); // get sent emails
emailRouter.get("/thread/:emailId", getEmailThread); // get full thread of a mail
emailRouter.post("/", sendEmail); // send email
emailRouter.post("/read/:emailId", readEmailAt) // mark email as read
emailRouter.post("/reply/:emailId", replyToEmail) // reply to email
emailRouter.delete("/:emailId/:userId", deleteEmail) // delete email

export default emailRouter;
# types/express/index.d.ts
import { User } from '../../models/user';

declare global {
  namespace Express {
    interface Request {
      user?: Partial<User>;
    }
  }
}

export {};
# app.ts
import express, { json } from "express"
import config from 'config'
import sequelize from "./db/sequelize"
import errorLogger from "./middlewares/error/error-logger"
import errorResponder from "./middlewares/error/error-responder"
import notFound from "./middlewares/not-found"
import cors from 'cors'
import authRouter from "./routers/auth/auth"
import emailRouter from "../src/routers/email/email"
import labelRouter from "../src/routers/label/label"
import emailLabelRouter from "../src/routers/email-label/email-labels"
import draftRouter from "../src/routers/draft/draft"
import '../types/express';


const port = config.get<string>('app.port')
const name = config.get<string>('app.name')
const force = config.get<boolean>('sequelize.sync.force')

const app = express();

export async function start() {
    await sequelize.sync({ force })

    // middlewares
    app.use(cors()) // allow any client to use this server

    app.use(json()) // a middleware to extract the post/put/patch data and save it to the request object in case the content type of the request is application/json

    // routers
    app.use('/auth', authRouter)
    app.use('/emails', emailRouter)
    app.use('/labels', labelRouter, emailLabelRouter)
    app.use("/draft", draftRouter)
    

    // special notFound middleware
    app.use(notFound)

    // error middleware
    app.use(errorLogger)
    app.use(errorResponder)

    // app.listen(port, () => console.log(`${name} started on port ${port}...`))
}

export default app
# io/io.ts
// src/io/io.ts

import { io } from "socket.io-client";
import config from 'config';

const socket = io(config.get<string>('io.url'), {
  transports: ['websocket'],
  reconnection: true
});

socket.on('connect', () => {
    console.log('ðŸŸ¢ Connected to Socket.IO server');
  });

socket.on('disconnect', () => {
    console.log('ðŸ”´ Disconnected from Socket.IO server');
  });

export default socket;
# middlewares/validation.ts
import { NextFunction, Request, Response } from "express";
import { ObjectSchema } from "joi";
import AppError from "../errors/app-error";
import { StatusCodes } from "http-status-codes";

export default function validation(validator: ObjectSchema) {
    return async function (req: Request, res: Response, next: NextFunction) {
        try {
            req.body = await validator.validateAsync(req.body)
            next()
        } catch (e) {
            next(new AppError(StatusCodes.UNPROCESSABLE_ENTITY, e.message))
        }
    }
}

# middlewares/not-found.ts
import { NextFunction, Request, Response } from "express";
import AppError from "../errors/app-error";
import { StatusCodes } from "http-status-codes";

export default function notFound(req: Request, res: Response, next: NextFunction) {
    next(new AppError(StatusCodes.NOT_FOUND, 'not found'))
}
# middlewares/params-validation.ts
import { NextFunction, Request, Response } from "express";
import { ObjectSchema } from "joi";
import AppError from "../errors/app-error";
import { StatusCodes } from "http-status-codes";

export default function paramsValidation(validator: ObjectSchema) {
    return async function (req: Request, res: Response, next: NextFunction) {
        try {
            req.params = await validator.validateAsync(req.params)
            next()
        } catch (e) {
            next(new AppError(StatusCodes.UNPROCESSABLE_ENTITY, e.message))
        }
    }
}

# middlewares/error/error-responder.ts
import { NextFunction, Request, Response } from "express";
import AppError from "../../errors/app-error";

export default function errorResponder(err: Error, req: Request, res: Response, next: NextFunction) {
    if(err instanceof AppError) {
        res.status(err.status).send(err.message)
    } else {
        res.status(500).send(err.message)
    }
}
# middlewares/error/error-logger.ts
import { NextFunction, Request, Response } from "express";

export default function errorLogger(err: Error, req: Request, res: Response, next: NextFunction) {
    console.error(err.message)
    next(err)
}
# middlewares/auth.ts
// middlewares/auth.ts
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";
import config from "config";
import AppError from "../errors/app-error";
import { StatusCodes } from "http-status-codes";

export default function authenticate(req: Request, res: Response, next: NextFunction) {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return next(new AppError(StatusCodes.UNAUTHORIZED, "Missing or invalid token"));
    }

    const token = authHeader.split(" ")[1];
    try {
        const decoded = jwt.verify(token, config.get<string>("app.jwtSecret"));
        req.user = decoded;
        next();
    } catch (e) {
        next(new AppError(StatusCodes.UNAUTHORIZED, "Invalid token"));
    }
}
# models/draft.ts
import { AllowNull, BelongsTo, Column, DataType, Default, ForeignKey, Model, PrimaryKey, Table } from "sequelize-typescript";
import User from "./user";

@Table({ underscored: true })
export default class Draft extends Model {
  @PrimaryKey @Default(DataType.UUIDV4) @Column(DataType.UUID)
  id: string;

  @ForeignKey(() => User) @AllowNull(false) @Column(DataType.UUID)
  userId: string;

  @Column(DataType.STRING)
  subject: string;

  @Column(DataType.TEXT)
  body: string;
  
  @Column(DataType.STRING) toEmail: string;
  @Column(DataType.DATE) lastEditedAt: Date;

  @BelongsTo(() => User) user: User;
}
# models/email.ts
import { AllowNull, BelongsTo, BelongsToMany, Column, DataType, Default, ForeignKey, HasMany, Model, PrimaryKey, Table } from "sequelize-typescript";
import User from "../models/user";
import Label from "../models/labels";
import EmailLabel from "./emailLabel";

@Table({
    underscored: true,
})
export default class Email extends Model {

    @PrimaryKey
    @Default(DataType.UUIDV4)
    @Column(DataType.UUID)
    id: string;

    @AllowNull(false)
    @Column(DataType.STRING)
    subject: string;

    @AllowNull(false)
    @Column(DataType.TEXT)
    body: string;

    @AllowNull(false)
    @Column(DataType.STRING)
    fromEmail: string;

    @AllowNull(false)
    @Column(DataType.STRING)
    toEmail: string;

    @AllowNull(true)
    @Column(DataType.DATE)
    sentAt: Date | null;

    // Ensure @Column comes first 
    @AllowNull(true)
    @Column(DataType.DATE) 
    readAt: Date;  // Fix order here

    @ForeignKey(() => User)
    @AllowNull(false)
    @Column(DataType.UUID)
    userId: string;

    @Default(false)
    @Column(DataType.BOOLEAN)
    deletedBySender: boolean;

    @Default(false)
    @Column(DataType.BOOLEAN)
    deletedByReceiver: boolean; 

    @ForeignKey(() => Email)
    @AllowNull(true)
    @Column(DataType.UUID)
    replyToId: string;

    @Default(false)
    @Column(DataType.BOOLEAN)
    isDraft: boolean;

    @BelongsTo(() => Email, { foreignKey: 'replyToId' })
    parentEmail: Email;

    @BelongsTo(() => User)
    user: User;

    @BelongsToMany(() => Label, () => EmailLabel)
    labels: Label[];

}
# models/emailLabel.ts
import {
    Table, Model, Column, DataType, ForeignKey
  } from "sequelize-typescript";
  import Email from "../models/email";
  import Label from "../models/labels";
  
  @Table({
    tableName: "email_labels",
    underscored: true,
    timestamps: false,
  })
  export default class EmailLabel extends Model {
    @ForeignKey(() => Email)
    @Column(DataType.UUID)
    emailId: string;
  
    @ForeignKey(() => Label)
    @Column(DataType.UUID)
    labelId: string;
  }
# models/user.ts
import { AllowNull, Column, DataType, Default, Model, PrimaryKey, Table, HasMany } from "sequelize-typescript";
import Email from "../models/email";

@Table({
    underscored: true,
})
export default class User extends Model {

    @PrimaryKey
    @Default(DataType.UUIDV4)
    @Column(DataType.UUID)
    id: string;

    @AllowNull(false)
    @Column(DataType.STRING)
    name: string;

    @AllowNull(false)
    @Column(DataType.STRING)
    email: string;

    @AllowNull(false)
    @Column(DataType.STRING)
    password: string;

    @HasMany(() => Email)
    emails: Email[];

}
# models/labels.ts
import {
  Table, Model, Column, DataType, PrimaryKey, Default, BelongsToMany
} from "sequelize-typescript";
import Email from "./email";
import EmailLabel from "./emailLabel";

@Table({
  underscored: true,
})
export default class Label extends Model {
  @PrimaryKey
  @Default(DataType.UUIDV4)
  @Column(DataType.UUID)
  id: string;

  @Column(DataType.STRING)
  name: string;

  @BelongsToMany(() => Email, () => EmailLabel)
  emails: Email[];
}
# db/sequelize.ts
import { Sequelize } from "sequelize-typescript";
import config from 'config'
import User from "../models/user";
import Email from "../models/email";
import Label from "../models/labels";
import EmailLabel from "../models/emailLabel";
import Draft from "../models/draft";

const logging = config.get<boolean>('sequelize.logging') ? console.log : false

const sequelize = new Sequelize({
    // [ add ALL model classes you created to the array ]:
    models: [  User, Email, Label, EmailLabel, Draft  ],
    dialect: 'mysql',
    ...config.get('db'),
    logging,
})

export default sequelize
# errors/app-error.ts
export default class AppError extends Error {
    constructor(public status: number, message: string) {
        super(message)
    }
}
# controllers/draft/controller.ts
import AppError from '../../errors/app-error';
import { Request, Response, NextFunction } from 'express';
import { StatusCodes } from 'http-status-codes';
import Email from '../../models/email';
import User from '../../models/user';

export async function getDrafts(req: Request, res: Response, next: NextFunction) {
    try {
        const { userId } = req.params;
        const user = await User.findByPk(userId);
        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'User not found'));

        const drafts = await Email.findAll({
            where: {
                userId: user.id,
                isDraft: true
            }
        });

        res.json(drafts);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}
# controllers/auth/controller.ts
import { createHmac } from "crypto";
import { sign } from 'jsonwebtoken'; 
import config from 'config'
import { Request, Response, NextFunction } from 'express';
import User from "../../models/user";
import AppError from "../../errors/app-error";
import { StatusCodes } from "http-status-codes";
import socket from "../../io/io";


// hash password
export function hashPassword(password: string): string {
    return createHmac('sha256', config.get<string>('app.secret'))
            .update(password)
            .digest('hex')
}

// get all users
export async function getAllUsers(req: Request, res: Response, next: NextFunction) {
    try {
        const users = await User.findAll();
        res.json(users);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

// login
export async function login(req: Request<{}, {}, {username: string, password: string}>, res: Response, next: NextFunction) {
    try {
        const { username, password } = req.body;

        const user = await User.findOne({
            where: {
                email: username, 
                password: hashPassword(password)
            },
        });

        if (!user) return next(new AppError(StatusCodes.UNAUTHORIZED, 'wrong credentials'));
        const jwt = sign(user.get({ plain: true }), config.get<string>('app.jwtSecret'));

        // socket.emit("user:login", {
        //     id: user.id,
        //     name: user.name,
        //     username: user.email,
        //     time: new Date().toISOString(),
        //   });
      
        res.json({ 
            jwt,
            messages: `Welcome ${user.name}!` 
        });
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

// register
export async function register(req: Request<{}, {}, {name: string, password: string, email: string}>, res: Response, next: NextFunction) {
    try {
        const { name, password, email } = req.body;

        const existingUser = await User.findOne({
            where: { email },
        });

        if (existingUser) return next(new AppError(StatusCodes.BAD_REQUEST, 'Email already in use'));

        const user = await User.create({
            name,
            email, 
            password: hashPassword(password),
        });

        res.json(user);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

// delete user
export async function deleteUser(req: Request<{id: string}, {}, {}>, res: Response, next: NextFunction) {
    try {
        const { id } = req.params;
        const user = await User.findByPk(id);

        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'user not found'));

        await user.destroy();
        res.json({ message: 'user deleted' });
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

// update user
export async function updateUser(req: Request<{id: string}, {}, {name: string, password: string, email: string, role: string}>, res: Response, next: NextFunction) {
    try {
        const { id } = req.params;
        const { name, email, password } = req.body;
        const user = await User.findByPk(id);

        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'user not found'));

        user.name = name;
        user.email = email;
        user.password = hashPassword(password);

        await user.save();
        res.json(user);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

// logout with userId

export async function logout(req: Request<{ id: string }>, res: Response, next: NextFunction) {
    try {
        const { id: userId } = req.params;

        if (!userId) return next(new AppError(StatusCodes.BAD_REQUEST, 'Missing userId'));

        const user = await User.findByPk(userId);
        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'User not found'));

        socket.emit("user:login", {
            id: user.id,
            name: user.name,
            username: user.email,
            time: new Date().toISOString(),
          });
          
          socket.emit("user:online", {
            id: user.id,
            name: user.name,
            username: user.email,
            time: new Date().toISOString(),
          });

        res.json({ message: `User ${user.name} logged out` });
    } catch (e: any) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}
# controllers/auth/validator.ts
import Joi from 'joi';

export const loginValidator = Joi.object({
    email: Joi.string().required(),
    password: Joi.string().required()
})

export const registerValidator = Joi.object({
    name: Joi.string().min(5).required(),
    password: Joi.string().required(),
    email: Joi.string().email().required(),
})

export const updateUserValidator = registerValidator;

export const deleteUserValidator = Joi.object({
    id: Joi.string().required()
})


# controllers/email-labels/controller.ts
import AppError from '../../errors/app-error';
import { Request, Response, NextFunction } from 'express';
import { StatusCodes } from 'http-status-codes';
import Email from '../../models/email';
import EmailLabel from '../../models/emailLabel';
import Label from '../../models/labels';

export async function addLabelToEmail(req: Request, res: Response, next: NextFunction) {
    try {
        const { emailId } = req.params;
        const { labelId } = req.body;

        const email = await Email.findByPk(emailId);
        if (!email) return next(new AppError(StatusCodes.NOT_FOUND, 'Email not found'));

        const label = await Label.findByPk(labelId);
        if (!label) return next(new AppError(StatusCodes.NOT_FOUND, 'Label not found'));

        const existing = await EmailLabel.findOne({ where: { emailId, labelId } });
        if (existing) return next(new AppError(StatusCodes.CONFLICT, 'Label already attached to email'));

        await EmailLabel.create({ emailId, labelId });

        res.status(StatusCodes.CREATED).json({ message: 'âœ… Label added to email' });
    } catch (e: any) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}


# controllers/label/controller.ts
import AppError from '../../errors/app-error';
import { Request, Response, NextFunction } from 'express';
import { StatusCodes } from 'http-status-codes';
import Label from '../../models/labels';
import User from '../../models/user';

export async function getLabels(req: Request, res: Response, next: NextFunction) {
    try {
        const { userId } = req.params;

        // Assuming you have a User model and a Label model
        const user = await User.findByPk(userId);
        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'User not found'));

        const labels = await Label.findAll({
            where: {
                userId: user.id,
            },
        });

        res.json(labels);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function createLabel(req: Request, res: Response, next: NextFunction) {
    try {
        const { name } = req.body;

        const existing = await Label.findOne({ where: { name } });
        if (existing) return next(new AppError(StatusCodes.CONFLICT, 'Label already exists'));

        const label = await Label.create({ name });

        res.status(StatusCodes.CREATED).json(label);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}
# controllers/email/controller.ts
import '../../types/express';
import AppError from '../../errors/app-error';
import { Request, Response, NextFunction } from 'express';
import { StatusCodes } from 'http-status-codes';
import Email from '../../models/email';
import User from '../../models/user';
import Draft from '../../models/draft';
import { Op } from 'sequelize';

export async function getEmails(req: Request, res: Response, next: NextFunction) {
    try {
        const emails = await Email.findAll({
            include: [{
                association: 'labels',
                attributes: ['id', 'name'],
                through: {
                    attributes: []
             }}],
        });
        res.json(emails);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function sendEmail(req: Request, res: Response, next: NextFunction) {
    try {
        const { subject, body, fromEmail, toEmail, userId, replyToId, isDraft = false } = req.body;

        if(isDraft) {
            const draft = await Draft.create({
                subject,
                body,
                toEmail,
                userId,
                lastEditedAt: new Date()
            });
            res.status(StatusCodes.CREATED).json(draft);
            return;
        } 

        const emailData: any = {
            subject,
            body,
            fromEmail,
            toEmail,
            userId,
            replyToId,
            isDraft
        };

        if (!isDraft) {
            emailData.sentAt = new Date();
        }

        const email = await Email.create(emailData);

        res.json(email);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function getEmailInbox(req: Request, res: Response, next: NextFunction) {
    try {
        const { userId } = req.params;

        const user = await User.findByPk(userId);
        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'User not found'));

        const emails = await Email.findAll({
            where: {
                toEmail: user.email,
                deletedByReceiver: false,
                replyToId: null,
                isDraft: false
            },
            include: [{
                association: 'labels',
                attributes: ['id', 'name'],
                through: { attributes: [] }
            }]
        });

        res.json(emails);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function getEmailSent(req: Request, res: Response, next: NextFunction) {
    try {
        const { userId } = req.params;

        const user = await User.findByPk(userId);
        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'User not found'));

        const emails = await Email.findAll({
            where: {
                fromEmail: user.email,
                deletedBySender: false,
                replyToId: null
            },
        });

        res.json(emails);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function readEmailAt(req: Request, res: Response, next: NextFunction) {
    try {
        const { emailId } = req.params;

        const email = await Email.findByPk(emailId);
        if (!email) return next(new AppError(StatusCodes.NOT_FOUND, 'Email not found'));

        email.readAt = new Date();
        await email.save();

        res.json(email);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function deleteEmail(req: Request, res: Response, next: NextFunction) {
    try {
        const { emailId, userId } = req.params;

        const email = await Email.findByPk(emailId);
        if (!email) return next(new AppError(StatusCodes.NOT_FOUND, 'Email not found'));

        const user = await User.findByPk(userId);
        if (!user) return next(new AppError(StatusCodes.NOT_FOUND, 'User not found'));

        const isSender = email.fromEmail === user.email;
        const isReceiver = email.toEmail === user.email;

        if (!isSender && !isReceiver) return next(new AppError(StatusCodes.FORBIDDEN, 'You are not authorized to delete this email'));
        if (isSender) email.deletedBySender = true;
        if (isReceiver) email.deletedByReceiver = true;

        if (email.deletedBySender && email.deletedByReceiver) {
            await email.destroy();
        } else {
            await email.save();
        }

        res.status(StatusCodes.NO_CONTENT).send();
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function replyToEmail(req: Request, res: Response, next: NextFunction) {
    try {
        const { emailId } = req.params;
        const { subject, body, fromEmail, toEmail, userId } = req.body;
        const original = await Email.findByPk(emailId);
        if (!original) return next(new AppError(StatusCodes.NOT_FOUND, 'Email to reply to not found'));

        const reply = await Email.create({
            subject,
            body,
            fromEmail,
            toEmail,
            userId,
            sentAt: new Date(),
            replyToId: emailId
        });

        res.status(StatusCodes.CREATED).json(reply);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function getEmailThread(req: Request, res: Response, next: NextFunction) {
    try {
        const { emailId } = req.params;

        const email = await Email.findByPk(emailId);
        if (!email) return next(new AppError(StatusCodes.NOT_FOUND, 'Email not found'));

        const replies = await Email.findAll({
            where: { replyToId: emailId }
        });

        res.json({ email, replies });
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

export async function searchEmails(req: Request, res: Response, next: NextFunction) {
    try {
        const { query } = req.query;
        const user = req.user;

        if (!query || typeof query !== "string") {
            return next(new AppError(StatusCodes.BAD_REQUEST, "Missing search query"));
        }

        const emails = await Email.findAll({
            where: {
                [Op.and]: [
                    {
                        subject: {
                            [Op.like]: `%${query}%`
                        }
                    },
                    {
                        [Op.or]: [
                            { toEmail: user.email },
                            { fromEmail: user.email }
                        ]
                    },
                    { isDraft: false }
                ]
            }
        });

        res.json(emails);
    } catch (e) {
        next(new AppError(StatusCodes.INTERNAL_SERVER_ERROR, e.message));
    }
}

# server.ts
import config from 'config';
import app, { start } from './app';


const port = config.get<string>('app.port');
const name = config.get<string>('app.name');

(async () =>{
    await start()
    app.listen(port, () => console.log(`${name} started on port ${port}...`))
})()
